{-# LANGUAGE GeneralizedNewtypeDeriving #-}
module RapidCheck where

import Control.Monad
import System.Random


--------------------------------------------------------------------------------
-- Simplified version of a Quick Check library
--------------------------------------------------------------------------------

newtype Gen a = MkGen { runGen :: IO a }
  deriving (Functor, Applicative, Monad)

newtype Property = MkProperty { asGenerator :: Gen Result }

data Result
  = Success
  | Failure { failingInputs :: [String] }
  deriving (Show, Eq, Ord)

instance Monoid Result where
  mempty = Success
  mappend (Failure f) _ = Failure f
  mappend _ (Failure f) = Failure f
  mappend Success Success = Success

--------------------------------------------------------------------------------

class Arbitrary a where
  arbitrary :: Gen a

class CoArbitrary a where
  coarbitrary :: a -> Gen b -> Gen b

class Testable a where
  property :: a -> Property

instance Testable Result where
  property r = MkProperty $ MkGen $ return r

instance Testable Bool where
  property = property . toResult where
    toResult b = if b then Success else Failure []

instance Testable Property where
  property = id

instance (Show a, Arbitrary a, Testable prop) => Testable (a -> prop) where
  property f = forAll arbitrary f

-- | For all values generated by `Gen a`, evaluate the property with the generated a

forAll :: (Show a, Testable prop) => Gen a -> (a -> prop) -> Property
forAll gen prop =
  MkProperty $ do
    x <- gen
    r <- asGenerator (property (prop x))
    case r of
      Failure r -> return $ Failure (show x : r)
      Success -> return Success

rapidCheck :: Testable prop => prop -> IO Result
rapidCheck = rapidCheckWith 100

rapidCheckWith :: Testable prop => Int -> prop -> IO Result
rapidCheckWith attemptNb prop = do
  let gen = asGenerator (property prop)
  results <- replicateM attemptNb (runGen gen)
  return (mconcat results)


--------------------------------------------------------------------------------
-- Helpers
--------------------------------------------------------------------------------

instance Arbitrary Int where
  arbitrary = MkGen randomIO

instance CoArbitrary Int where
  coarbitrary = undefined


--------------------------------------------------------------------------------
-- Example
--------------------------------------------------------------------------------

prop_addition :: Int -> Int -> Bool
prop_addition a b = a + b == b + a

prop_addition_bad :: Int -> Int -> Bool
prop_addition_bad a b = a + a == b + b

runTests :: IO ()
runTests = do
  print =<< rapidCheck prop_addition
  print =<< rapidCheck prop_addition_bad


--
